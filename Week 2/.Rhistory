library(tidyverse)
library(tidybayes)
library(rstan)
retail <- read_rds('data/storeSales.rds') %>%
mutate(storeIndex = as.integer(STORE_NUM))
options(mc.cores = parallel::detectCores())
hiRegModel <- stan_model(file='code/MLM_regression.stan')
detach("package:rstan", unload = TRUE)
options(mc.cores = parallel::detectCores())
hiRegModel <- rstan::stan_model(file='code/MLM_regression.stan')
hiRegModel <- rstan::stan_model(file='code/MLM_regression.stan')
file.edit(file.path(Sys.getenv("HOME"), ".R", "Makevars.win"))
hiRegModel <- rstan::stan_model(file='code/MLM_regression.stan')
file.edit(file.path(Sys.getenv("HOME"), ".R", "Makevars.win"))
hiRegModel <- rstan::stan_model(file='code/MLM_regression.stan')
install.packages("StanHeaders")
install.packages("rstan")
library(rstan)
options(mc.cores = parallel::detectCores())
hiRegModel <- stan_model(file='code/MLM_regression.stan')
file.rename("~/.R/Makevars.win", "~/.R/Makevars.win.bak")
library(rstan)
retail <- read_rds('data/storeSales.rds') %>%
mutate(storeIndex = as.integer(STORE_NUM))
options(mc.cores = parallel::detectCores())
hiRegModel <- stan_model(file='code/MLM_regression.stan')
Sys.setenv(LOCAL_LIBS = 'C:/R/win-library/4.0/rstan/lib/x64/libStanServices.a -L"C:/R/win-library/4.0/StanHeaders/libs/x64" -lStanHeaders -L"C:/R/win-library/4.0/RcppParallel/lib/x64" -ltbb')
hiRegModel <- stan_model(file='code/MLM_regression.stan')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\n CXX14FLAGS += -mtune=native -O3 -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(tidyverse)
library(rstanarm)
df <- read_csv('data.csv')
bilModel <- stan_model(file='MLM_binomial.stan')
Niter <-  1500
Nwarmup <- 1000
Nchains <- 4
fit <- sampling(bilModel,
data=list(nObs = nrow(df),
nGroups = nGroups,
groupID = df$group,
y = df$y),
iter = Niter,
warmup = Nwarmup,
chains = Nchains,
verbose = TRUE)
## save draws
thePars <- rstan::extract(fit,pars = c('theta','mu','sigma'))
thetaDraws <- as.data.frame(thePars$theta) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'group',values_to = 'value') %>%
separate(group,into = c('tmp','group'),sep=1) %>%
select(-tmp) %>%
mutate(group = as.integer(group))
library(tidyverse)
library(rstanarm)
df <- read_csv('data.csv')
bilModel <- stan_model(file='MLM_binomial.stan')
setwd("C:/Users/k4hansen/Dropbox/Public/teaching/bayesian machine learning/assignments/assignment1")
library(tidyverse)
library(rstanarm)
df <- read_csv('data.csv')
bilModel <- stan_model(file='MLM_binomial.stan')
Niter <-  1500
Nwarmup <- 1000
Nchains <- 4
fit <- sampling(bilModel,
data=list(nObs = nrow(df),
nGroups = nGroups,
groupID = df$group,
y = df$y),
iter = Niter,
warmup = Nwarmup,
chains = Nchains,
verbose = TRUE)
## save draws
thePars <- rstan::extract(fit,pars = c('theta','mu','sigma'))
thetaDraws <- as.data.frame(thePars$theta) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'group',values_to = 'value') %>%
separate(group,into = c('tmp','group'),sep=1) %>%
select(-tmp) %>%
mutate(group = as.integer(group))
library(tidyverse)
library(rstanarm)
df <- read_csv('data.csv')
bilModel <- stan_model(file='MLM_binomial.stan')
library(rstanarm)
library(rstan)
df <- read_csv('data.csv')
bilModel <- stan_model(file='MLM_binomial.stan')
Niter <-  1500
Nwarmup <- 1000
Nchains <- 4
fit <- sampling(bilModel,
data=list(nObs = nrow(df),
nGroups = nGroups,
groupID = df$group,
y = df$y),
iter = Niter,
warmup = Nwarmup,
chains = Nchains,
verbose = TRUE)
## save draws
thePars <- rstan::extract(fit,pars = c('theta','mu','sigma'))
thetaDraws <- as.data.frame(thePars$theta) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'group',values_to = 'value') %>%
separate(group,into = c('tmp','group'),sep=1) %>%
select(-tmp) %>%
mutate(group = as.integer(group))
max(df$group)
fit <- sampling(bilModel,
data=list(nObs = nrow(df),
nGroups = max(df$group),
groupID = df$group,
y = df$y),
iter = Niter,
warmup = Nwarmup,
chains = Nchains,
verbose = TRUE)
## save draws
thePars <- rstan::extract(fit,pars = c('theta','mu','sigma'))
thetaDraws <- as.data.frame(thePars$theta) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'group',values_to = 'value') %>%
separate(group,into = c('tmp','group'),sep=1) %>%
select(-tmp) %>%
mutate(group = as.integer(group))
thetaDraws[1:10,]
write_csv(thetaDraws, path = 'thetaDrawsM1.csv')
muSigDraws <- data.frame(mu = thePars$mu, sigma = thePars$sigma, draw = 1:length(thePars$mu))
write_csv(muSigDraws, path = 'muSigmaDrawsM1.csv')
df <- read_csv('data.csv')
nrow(filter(df,group==1))
sum(filter(df,group==1)$y)
nrow(filter(df,group==2))
nrow(filter(df,group==3))
nrow(filter(df,group==4))
nrow(filter(df,group==5))
nrow(filter(df,group==3))
sum(filter(df,group==3)$y)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- read_csv('data.csv')
alphaHatDF <- df %>%
group_by(group) %>%
summarize(nObs = n(),
pHat = mean(y),
alphaHat = log(pHat/(1.0-pHat))) %>%
arrange(alphaHat)
alphaTrue <- read_csv('parameters.csv')
thetaM1 <- read_csv('thetaDrawsM1.csv')
alphaM1DF <- thetaM1 %>%
group_by(group) %>%
summarize(mean = mean(value),
q2.5 = quantile(value,0.025),
q97.5 = quantile(value,0.975)) %>%
arrange(mean)
alphaHatDF %>%
select(alphaHat,group) %>%
left_join(alphaTrue, by = 'group') %>%
left_join(select(alphaM1DF,group,mean), by = 'group') %>%
pivot_longer(-alpha,names_to = 'estimate',value_to='value')
alphaHatDF %>%
select(alphaHat,group) %>%
left_join(alphaTrue, by = 'group') %>%
left_join(select(alphaM1DF,group,mean), by = 'group')
alphaHatDF %>%
select(alphaHat,group) %>%
left_join(alphaTrue, by = 'group') %>%
left_join(select(alphaM1DF,group,mean), by = 'group')
alphaHatDF %>%
select(alphaHat,group) %>%
left_join(alphaTrue, by = 'group') %>%
left_join(select(alphaM1DF,group,mean), by = 'group') %>%
select(-group) %>%
pivot_longer(-alpha,names_to = 'estimate',value_to='value')
alphaHatDF %>%
select(alphaHat,group) %>%
left_join(alphaTrue, by = 'group') %>%
left_join(select(alphaM1DF,group,mean), by = 'group') %>%
select(-group)
alphaHatDF %>%
select(alphaHat,group) %>%
left_join(alphaTrue, by = 'group') %>%
left_join(select(alphaM1DF,group,mean), by = 'group') %>%
select(-group) %>%
pivot_longer(-alpha,names_to = 'estimate',values_to='value') %>%
ggplot(aes(x = alpha,y = value, color = estimate )) + geom_point() + geom_abline(slope=1)
setwd("C:/Users/k4hansen/Dropbox/Public/teaching/bayesian machine learning/week 2")
thePars <- read_rds('data/RegModelNoShrinkDraws.rds')
dim(thePars$theta)
thePars <- read_rds('data/hiRegModelDraws.rds')
## convert draws to tidy format
alphaDraws <- as.data.frame(thePars$theta[,,1]) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'var',values_to = 'value') %>%
separate(var,into = c('tmp1','storeIndex'),sep=1) %>%
select(-tmp1)
betaDraws <- as.data.frame(thePars$theta[,,2]) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'var',values_to = 'value') %>%
separate(var,into = c('tmp1','storeIndex'),sep=1) %>%
select(-tmp1)
## calculate posterior statistics for slopes and intercepts
betaStats <- betaDraws %>%
group_by(storeIndex) %>%
mean_qi(value)
alphaStats <- alphaDraws %>%
group_by(storeIndex) %>%
mean_qi(value)
library(tidyverse)
library(tidybayes)
library(rstan)
library(ggridges)
thePars <- read_rds('data/hiRegModelDraws.rds')
## convert draws to tidy format
alphaDraws <- as.data.frame(thePars$theta[,,1]) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'var',values_to = 'value') %>%
separate(var,into = c('tmp1','storeIndex'),sep=1) %>%
select(-tmp1)
betaDraws <- as.data.frame(thePars$theta[,,2]) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'var',values_to = 'value') %>%
separate(var,into = c('tmp1','storeIndex'),sep=1) %>%
select(-tmp1)
## calculate posterior statistics for slopes and intercepts
betaStats <- betaDraws %>%
group_by(storeIndex) %>%
mean_qi(value)
alphaStats <- alphaDraws %>%
group_by(storeIndex) %>%
mean_qi(value)
thePars <- read_rds('data/RegModelNoShrinkDraws.rds')
## convert draws to tidy format
alphaDrawsNoShrink <- as.data.frame(thePars$theta[,,1]) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'var',values_to = 'value') %>%
separate(var,into = c('tmp1','storeIndex'),sep=1) %>%
select(-tmp1)
betaDrawsNoShrink <- as.data.frame(thePars$theta[,,2]) %>%
rowid_to_column(var = 'draw') %>%
pivot_longer(-draw,names_to = 'var',values_to = 'value') %>%
separate(var,into = c('tmp1','storeIndex'),sep=1) %>%
select(-tmp1)
betaStatsNoShrink <- betaDrawsNoShrink %>%
group_by(storeIndex) %>%
mean_qi(value)
alphaStatsNoShrink <- alphaDrawsNoShrink %>%
group_by(storeIndex) %>%
mean_qi(value)
alphaStats[1:5,]
alphaStatsNoShrink[1:5,]
betaStatsNoShrink[1:5,]
betaStats[1:5,]
betaStatsNoShrink <- betaDrawsNoShrink %>%
group_by(storeIndex) %>%
mean_qi(value) %>%
mutate(model = 'No Shrinkage')
alphaStatsNoShrink <- alphaDrawsNoShrink %>%
group_by(storeIndex) %>%
mean_qi(value) %>%
mutate(model = 'No Shrinkage')
betaStatsBoth <- bind_rows(
betaStats %>%
mutate(model = 'Shrinkage'),
betaStatsNoShrink
)
storeOrder <- betaStats %>%
arrange(value) %>%
select(storeIndex)
storeOrder
betaStatsBoth %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = storeIndex, y = value, ymin = .lower, ymax = .upper, color = model)) + geom_jitter()
betaStatsBoth %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) + geom_pointrange() + facet_wrap(~storeIndex)
betaStatsBoth[1:10,]
betaStatsBoth %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) + geom_pointrange() + facet_wrap(~storeIndex, scales = 'free')
storeOrder <- betaStats %>%
arrange(value) %>%
select(storeIndex) %>%
sample_n(10)
storeOrder
betaStatsBoth %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) + geom_pointrange() + facet_wrap(~storeIndex, nrow=1)
betaStatsBoth %>%
filter(storeIndex %in% storeOrder$storeIndex) %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) + geom_pointrange() + facet_wrap(~storeIndex, nrow=1)
storeOrder <- betaStats %>%
arrange(value) %>%
select(storeIndex) %>%
sample_n(20)
storeOrder
nStorePlot <- 20
storeOrder <- betaStats %>%
sample_n(nStorePlot) %>%
arrange(value) %>%
select(storeIndex)
betaStatsBoth %>%
filter(storeIndex %in% storeOrder$storeIndex) %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) + geom_pointrange() + facet_wrap(~storeIndex, nrow=1)
nStorePlot <- 30
storeOrder <- betaStats %>%
sample_n(nStorePlot) %>%
arrange(value) %>%
select(storeIndex)
betaStatsBoth %>%
filter(storeIndex %in% storeOrder$storeIndex) %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) +
geom_pointrange() +
facet_wrap(~storeIndex, nrow=1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
betaStatsBoth %>%
filter(storeIndex %in% storeOrder$storeIndex) %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) +
geom_pointrange() +
facet_wrap(~storeIndex, nrow=1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")
betaStatsBoth %>%
filter(storeIndex %in% storeOrder$storeIndex) %>%
mutate(storeIndex = factor(storeIndex, levels = storeOrder$storeIndex)) %>%
ggplot(aes(x = model, y = value, ymin = .lower, ymax = .upper, color = model)) +
geom_pointrange() +
facet_wrap(~storeIndex, nrow=1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none") +
labs(title = 'Posterior Summaries with Shrinkage and No Shrinkage',
subtitle = paste0(nStorePlot,' random stores'))
setwd("C:/Users/k4hansen/Dropbox/Public/teaching/bayesian machine learning/assignments/assignment1")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- read_csv('data.csv')
alphaHatDF <- df %>%
group_by(group) %>%
summarize(nObs = n(),
pHat = mean(y),
alphaHat = log(pHat/(1.0-pHat))) %>%
arrange(alphaHat)
qplot(alphaHatDF$nObs)
sum(alphaHatDF$nObs <= 15)
tmp <- cut(alphaHatDF$nObs, breaks = c(0,15,30,50,200))
table(tmp)
tmp <- cut(alphaHatDF$nObs, breaks = c(0,15,25,40,200))
table(tmp)
alphaHatDF %>%
mutate(nGroup = cut(nObs, breaks = c(0,15,25,40,200)))
alphaHatDF %>%
mutate(nGroup = cut(nObs, breaks = c(0,15,25,40,200))) %>%
ggplot(aes(x = alpha, y = alphaHat,color = nGroup)) + geom_point() + geom_abline(slope=1)
rmse1 <- alphaHatDF2 %>%
summarize(rmse =  sqrt(sum((alphaHat - alpha)**2)/n()) )
alphaHatDF2 <- alphaHatDF %>%
left_join(alphaTrue, by = 'group') %>%
mutate(nGroup = cut(nObs, breaks = c(0,15,25,40,200)))
alphaTrue <- read_csv('parameters.csv')
alphaHatDF2 <- alphaHatDF %>%
left_join(alphaTrue, by = 'group') %>%
mutate(nGroup = cut(nObs, breaks = c(0,15,25,40,200)))
rmse1 <- alphaHatDF2 %>%
summarize(rmse =  sqrt(sum((alphaHat - alpha)**2)/n()) )
rmse1
sum(is.na(alphaHatDF$alphaHat))
sum(is.infinite(alphaHatDF$alphaHat))
cor(alphaHatDF2$alphaHat,alphaHatDF2$alpha)
cor(filter(alphaHatDF2,!player == 499)$alphaHat,filter(alphaHatDF2,!player == 499)$alpha)
alphaHatDF2 <- alphaHatDF2 %>%
mutate(nGroup = cut(nObs, breaks = c(0,15,25,40,200)))
table(alphaHatDF2$nGroup)
thetaM1 <- read_csv('thetaDrawsM1.csv')
nrow(thetaM1)
thetaM1 <- read_csv('thetaDrawsM1.csv')
alphaM1DF <- thetaM1 %>%
group_by(player) %>%
summarize(mean = mean(value)) %>%
arrange(mean)
alphaM1DF %>%
slice(1:10)
alphaM1DF %>%
arrange(desc(mean)) %>%
slice(1:10)
tmp <- alphaM1DF %>%
arrange(desc(mean))
filter(tmp, player == 499)
tmp[1:10,]
which(tmp$player==499)
alphaM1DF
alphaHatDF[1:10,]
df <- read_csv('data.csv')
alphaHatDF <- df %>%
group_by(player) %>%
summarize(nObs = n(),
pHat = mean(y),
alphaHat = log(pHat/(1.0-pHat))) %>%
arrange(alphaHat)
alphaHatDF[1:10,]
alphaTrue <- read_csv('parameters.csv')
alphaHatDF2 <- alphaHatDF %>%
left_join(alphaTrue, by = 'player')
alphaHatDF2 <- alphaHatDF2 %>%
mutate(nGroup = cut(nObs, breaks = c(0,15,25,40,200)))
alphaHatDF2[1:10,]
alphaM1DF <- alphaM1DF %>%
left_join(select(alphaHatDF2,player,nObs,nGroup), by = 'player')
alphaM1DF
alphaM1DF
alphaM1DF <- alphaM1DF %>%
left_join(select(alphaHatDF2,alpha,player,nObs,nGroup), by = 'player')
alphaM1DF
df <- read_rds('data/uberRides.rds')
library(tidyverse)
library(tidybayes)
library(rstan)
library(ggridges)
df <- read_rds('data/uberRides.rds')
write_csv(df,'data/unerRides.csv')
df <- read_csv('data/uberRides.csv') %>%
mutate(amount = abs(amount),
logAmount = log(amount))
df <- read_csv('data/uberRides.csv') %>%
mutate(amount = abs(amount),
logAmount = log(amount))
View(df)
options(mc.cores = parallel::detectCores())
normalModel <- stan_model(file='code/MLM_simple.stan')
thePars <- read_rds('data/normalModelDraws.rds')
retail <- read_rds('data/storeSales.rds')
write_csv(retail,'data/storeSales.csv')
retail <- read_csv('data/storeSales.csv') %>%
mutate(storeIndex = as.integer(STORE_NUM))
storeID <- retail %>%
View(retail)
storeInfo <- read_rds('data/storeInfo.rds')
write_csv(storeInfo,'data/storeInfo.csv')
storeInfo <- read_csv('data/storeInfo.csv')
zDF <- read_rds('data/zDF.rds')
zDF
write_csv(zDF,'data/zDF.csv')
zDF <- read_csv('data/zDF.csv')
